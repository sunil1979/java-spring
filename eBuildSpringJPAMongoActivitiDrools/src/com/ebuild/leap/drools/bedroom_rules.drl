package com.ebuild.leap.drools

/*
PRECONDITION :- 
1. THE IL ELEMENT IS ALREADY IDENTIFIED TO BE BEDROOM
2. BEDROOM FACT TYPE IS INSTANTIATED
*/

//list any import classes here.
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import com.ebuild.leap.pojo.*;
import com.ebuild.leap.util.*;
import com.ebuild.leap.service.*;
import com.ebuild.leap.drools.*;


//declare any global variables here
global DesignerServiceFacadeImpl designerService;
global LookupPalette lookupPalette;
global Element rootElement;
global Element newChildElementData;

//declare quasi object to track changes
declare TriggerFact
	newElementId : Long
	finishId : Long
	themes : Set
	flooring : String
end


rule "init rule - set trigger fact and assert"
salience 100000
	when
		$triggerfact : TriggerFact(newElementId == 0)
	then
		/*
		System.out.println("************************BEFORE********************************");
		System.out.println("NewElementId :"+$triggerfact.getNewElementId());
		System.out.println("Finish :"+$triggerfact.getFinishId());
		System.out.println("Flooring :"+$triggerfact.getFlooring());
		System.out.println("Themes :"+$triggerfact.getThemes());	
		System.out.println("*************************BEFORE*******************************");
		*/
		//set new element id
		$triggerfact.setNewElementId(newChildElementData.getId());
		//set finish
		if (newChildElementData.getCategory() != null
				&& newChildElementData.getType() != null
				&& (newChildElementData.getCategory().getId().equals(EbuildleapConstants.UNIT_ELEMENT_CATEGORY) || newChildElementData.getCategory()
						.getId().equals(EbuildleapConstants.SET_ELEMENT_CATEGORY))
				&& newChildElementData.getType().getId().equals(EbuildleapConstants.CAB_ELEMENT_TYPE) && newChildElementData.getFinish() != null){
				$triggerfact.setFinishId(newChildElementData.getFinish().getId());
		}
		//set flooring
		if (newChildElementData.getCategory() != null && newChildElementData.getType() != null
			&& newChildElementData.getCategory().getId().equals(EbuildleapConstants.UNIT_ELEMENT_CATEGORY)
			&& newChildElementData.getType().getId().equals(EbuildleapConstants.FDC_ELEMENT_TYPE)){
				$triggerfact.setFlooring(newChildElementData.getCode1());
		}
		//set themes
		if (newChildElementData.getCategory() != null
			&& newChildElementData.getType() != null
			&& newChildElementData.getCategory().getId().equals(EbuildleapConstants.UNIT_ELEMENT_CATEGORY)
				&& newChildElementData.getType().getId().equals(EbuildleapConstants.CAB_ELEMENT_TYPE)
				&& newChildElementData.getElementThemes() != null) {
			Set<Long> themes = new HashSet();	
			for (Theme theme : newChildElementData.getElementThemes()) {
				themes.add(theme.getId());
			}
			$triggerfact.setThemes(themes);
		}
		
		System.out.println("************************AFTER********************************");
		System.out.println("NewElementId :"+$triggerfact.getNewElementId());
		System.out.println("Finish :"+$triggerfact.getFinishId());
		System.out.println("Flooring :"+$triggerfact.getFlooring());
		System.out.println("Themes :"+$triggerfact.getThemes());	
		System.out.println("************************AFTER********************************");
		update($triggerfact);
		
end


rule "For Every Element Insert ElementManifest"
    when
        $element : Element()
        $elementManifest : ElementManifest() from $element.elementManifestList
    then      
		insert($elementManifest);
end

rule "For Every ElementManifest Insert Element"
    when
        $elementManifest : ElementManifest()
    then
        insert($elementManifest.getChildElement());
end


rule "bedroom theme rule"
dialect "java" 
	when
		$triggerfact : TriggerFact(themes != null && newElementId != null && $newElementId : newElementId && $bedroomThemes : themes)
		$elementManifest : ElementManifest(childElement != null && childElement.id != $newElementId && $childElementThemes : childElement.elementThemes &&  childElement.finish != null && childElement.category != null && childElement.type != null 
		&& childElement.category.id == 50 && childElement.type.id == 20)
		$theme : Theme($bedroomThemes not contains id && eval(!containsItem($bedroomThemes,lookupPalette.getValues("bedroom_theme_theme_lookup.properties",id.toString())))) from $childElementThemes
	then
		System.out.println("Bedroom Theme Rule Conditions Met :");
		EbuildleapResultObject ero = designerService.getVariantElements(rootElement, $elementManifest, "MONGO");
		if(ero.getResultStatus().equalsIgnoreCase(EbuildleapConstants.SERVICE_CALL_SUCCESSFUL) && ero.getResult() != null && ero.getResult().size() > 0){
			Boolean foundVariant = false;
			for(int i = 0; i<ero.getResult().size();i++){
				Element variantElement = (Element)ero.getResult().get(i);
				if(!foundVariant && containsItem1($bedroomThemes,variantElement.getElementThemes())){
					System.out.println("Replacing :"+$elementManifest.getChildElement().getId()+" with :"+variantElement.getId());
					$elementManifest.setChildElement(variantElement);
					foundVariant = true;
					update($elementManifest);
				}
				if(!foundVariant){
					for(Theme theme : variantElement.getElementThemes()){
						if(containsItem($bedroomThemes,lookupPalette.getValues("bedroom_theme_theme_lookup.properties",theme.getId().toString()))){
							System.out.println("Replacing :"+$elementManifest.getChildElement().getId()+" with :"+variantElement.getId());
							$elementManifest.setChildElement(variantElement);
							foundVariant = true;
							update($elementManifest);
						}
					}
				}
			}
			if(!foundVariant){
				System.out.println("**********************No valid variant found********************");
			}
		}
end


rule "bedroom finish rule"
dialect "java"
	when
		$triggerfact : TriggerFact(newElementId != null && $newElementId : newElementId && finishId != null && $finishId : finishId)
		$elementManifest : ElementManifest(childElement != null && childElement.finish != null && childElement.category != null && childElement.type != null && childElement.id != $newElementId && lookupPalette.getValues("bedroom_finish_finish_lookup.properties",$finishId.toString()) != null &&
		lookupPalette.getValues("bedroom_finish_finish_lookup.properties",$finishId.toString()) not contains childElement.finish.id.toString()  && (childElement.category.id == 40 || childElement.category.id == 50) && childElement.type.id == 20)
	then 
		System.out.println("Finish Rule Criteria Met :"+$elementManifest.getChildElement().getFinish().getId());
		EbuildleapResultObject ero = designerService.getVariantElements(rootElement, $elementManifest, "MONGO");
		if(ero.getResultStatus().equalsIgnoreCase(EbuildleapConstants.SERVICE_CALL_SUCCESSFUL) && ero.getResult() != null && ero.getResult().size() > 0){
			Boolean foundVariant = false;
			//check if there is a variant with compatible finish and same theme as the child element being replaced
			for(int i = 0; i<ero.getResult().size();i++){
				Element variantElement = (Element)ero.getResult().get(i);
				if(!foundVariant && variantElement.getFinish() != null && $elementManifest.getChildElement().getElementThemes() != null && lookupPalette.getValues("bedroom_finish_finish_lookup.properties",$finishId.toString()).contains(variantElement.getFinish().getId().toString())
					 && containsTheme(variantElement.getElementThemes(),$elementManifest.getChildElement().getElementThemes())){
						System.out.println("Replacing :"+$elementManifest.getChildElement().getId()+" with :"+variantElement.getId());
						$elementManifest.setChildElement(variantElement);
						foundVariant = true;
						update($elementManifest);
					}
			}
			//if valid variant not found, find variant with only matching finish
			if(!foundVariant){		
				for(int i = 0; i<ero.getResult().size();i++){
					Element variantElement = (Element)ero.getResult().get(i);
					if(variantElement.getFinish() != null && lookupPalette.getValues("bedroom_finish_finish_lookup.properties",$finishId.toString()) != null && lookupPalette.getValues("bedroom_finish_finish_lookup.properties",$finishId.toString()).contains(variantElement.getFinish().getId().toString())){
						System.out.println("Replacing :"+$elementManifest.getChildElement().getId()+" with :"+variantElement.getId());
						$elementManifest.setChildElement(variantElement);
						foundVariant = true;
						update($elementManifest);
					}
				}
			}
			if(!foundVariant){
				System.out.println("**********************No valid variant found********************");
			}
		}
end


rule "Sync flooring with cabintetry finish rule"
	when
		$triggerfact : TriggerFact(newElementId != null && $newElementId : newElementId && finishId != null && $finishId : finishId)
		$elementManifest : ElementManifest(childElement != null && childElement.code1 != null && childElement.category != null && childElement.type != null && childElement.id != $newElementId && childElement.category.id == 40 && 
		childElement.type.id == 50 && eval(childElement.getCode1().startsWith("FL")) && $code1 : childElement.code1 && eval(!stringContainsListItem($code1,lookupPalette.getValues("bedroom_finish_flooring_lookup.properties",$finishId.toString()))))
	then
		System.out.println("Sync flooring with cabintetry finish MET");
		EbuildleapResultObject ero = designerService.getVariantElements(rootElement, $elementManifest, "MONGO");
		if(ero.getResultStatus().equalsIgnoreCase(EbuildleapConstants.SERVICE_CALL_SUCCESSFUL) && ero.getResult() != null && ero.getResult().size() > 0){
			Boolean foundVariant = false;
			for(int i = 0; i<ero.getResult().size();i++){
				Element variantElement = (Element)ero.getResult().get(i);
				if(!foundVariant && variantElement.getCode1() != null && lookupPalette.getValues("bedroom_finish_flooring_lookup.properties",$finishId.toString()) != null && lookupPalette.getValues("bedroom_finish_flooring_lookup.properties",$finishId.toString()).contains(variantElement.getCode1())){
					System.out.println("Replacing :"+$elementManifest.getChildElement().getId()+" with :"+variantElement.getId());
					$elementManifest.setChildElement(variantElement);
					$triggerfact.setFlooring(variantElement.getCode1());
					foundVariant = true;
					update($elementManifest);
					update($triggerfact);
				}
			}
			if(!foundVariant){
				System.out.println("**********************No valid variant found********************");
			}
		}		
end


rule "Sync cabinetry finish with flooring rule"
	when
		$triggerfact : TriggerFact(newElementId != null && $newElementId : newElementId && flooring != null && $flooring : flooring)
		$elementManifest : ElementManifest(childElement != null && childElement.finish != null && childElement.category != null && childElement.type != null  && childElement.id != $newElementId && (childElement.category.id == 40 || childElement.category.id == 50) && childElement.type.id == 20 &&
		lookupPalette.getValues("bedroom_flooring_finish_lookup.properties",$flooring) not contains childElement.finish.id.toString())
	then
		System.out.println("Sync cabinetry finish with flooring rule MET :"+$elementManifest.getChildElement().getFinish().getId());
		EbuildleapResultObject ero = designerService.getVariantElements(rootElement, $elementManifest, "MONGO");
		if(ero.getResultStatus().equalsIgnoreCase(EbuildleapConstants.SERVICE_CALL_SUCCESSFUL) && ero.getResult() != null && ero.getResult().size() > 0){
		Boolean foundVariant = false;
			for(int i = 0; i<ero.getResult().size();i++){
				Element variantElement = (Element)ero.getResult().get(i);
				if(!foundVariant && variantElement.getFinish() != null && lookupPalette.getValues("bedroom_flooring_finish_lookup.properties",$flooring) != null &&lookupPalette.getValues("bedroom_flooring_finish_lookup.properties",$flooring).contains(variantElement.getFinish().getId().toString())){
					System.out.println("Replacing :"+$elementManifest.getChildElement().getId()+" with :"+variantElement.getId());
					$elementManifest.setChildElement(variantElement);
					$triggerfact.setFinishId(variantElement.getFinish().getId());
					if($elementManifest.getChildElement().getCategory() !=null && 
					$elementManifest.getChildElement().getType() != null && $elementManifest.getChildElement().getElementThemes() != null &&
					$elementManifest.getChildElement().getCategory().getId().equals(EbuildleapConstants.UNIT_ELEMENT_CATEGORY) && 
					$elementManifest.getChildElement().getType().getId().equals(EbuildleapConstants.CAB_ELEMENT_TYPE)){
						if($triggerfact.getThemes() != null){
							$triggerfact.getThemes().clear();
						}
						$triggerfact.setThemes(getIdList($elementManifest.getChildElement().getElementThemes()));
					}
					foundVariant = true;
					update($elementManifest);
					update($triggerfact);
				}
			}
			if(!foundVariant){
				System.out.println("**********************No valid variant found********************");
			}
		}
end


rule "Sync skirting with flooring"
	when
		$triggerfact : TriggerFact(newElementId != null && $newElementId : newElementId && flooring != null && $flooring : flooring)
		$elementManifest : ElementManifest(childElement != null && childElement.category != null && childElement.type != null  && childElement.id != $newElementId && childElement.category.id == 40 && childElement.type.id == 50 &&
		lookupPalette.getValues("flooring_skirting_lookup.properties",$flooring) not contains childElement.code1)
	then
		System.out.println("Sync skirting with flooring MET :"+$elementManifest.getChildElement().getId());
		EbuildleapResultObject ero = designerService.getVariantElements(rootElement, $elementManifest, "MONGO");
		if(ero.getResultStatus().equalsIgnoreCase(EbuildleapConstants.SERVICE_CALL_SUCCESSFUL) && ero.getResult() != null && ero.getResult().size() > 0){
			Boolean foundVariant = false;
			for(int i = 0; i<ero.getResult().size();i++){
				Element variantElement = (Element)ero.getResult().get(i);
				if(!foundVariant && lookupPalette.getValues("flooring_skirting_lookup.properties",$flooring) != null && lookupPalette.getValues("flooring_skirting_lookup.properties",$flooring).contains(variantElement.getCode1())){
					$elementManifest.setChildElement(variantElement);
					foundVariant = true;
					update($elementManifest);
				}
			}
			if(!foundVariant){
				System.out.println("**********************No valid variant found********************");
			}
		}
end


function Boolean containsItem(Set SetA, Set SetB){
		//System.out.println("List A :" + ListA.toString());
		//System.out.println("SetB :" + SetB.toString());
		for (Object item1 : SetA) {
			if (SetB.contains(((Long)item1).intValue())) {
				//System.out.println("contains");
				return true;
			}
		}
		return false;
	}

function Boolean containsItem1(Set SetA, List ListB){
		//System.out.println("SetA :" + SetA.toString());
		//System.out.println("ListB :" + ListB.toString());
		for (Object item1 : SetA) {
			for (Object theme : ListB) {
				System.out.println("Theme Id :"+((Theme)theme).getId());
				if (((Theme)theme).getId().equals((Long)item1)) {
					System.out.println("contains");
					return true;
				}
			}
		}
		return false;
}

function Boolean containsTheme(List ListA, List ListB){
	//System.out.println("ListA :"+ListA);
	//System.out.println("ListB :"+ListB);
	for(Object themeA : ListA){
		for(Object themeB : ListB){
			if(((Theme)themeA).getId().equals(((Theme)themeB).getId())){
				return true;
			}
		}
	}
	return false;
}

function Boolean stringContainsListItem(String str, Set setItems){
	//System.out.println("Input String :"+str);
	//System.out.println("Input List :"+setItems.toString());
	for(Object strObj : setItems){
		if(str.contains((String)strObj)){
			//System.out.println("String contains list item :"+(String)strObj);
			return true;
		}
	}
	return false;
}

function Set getIdList(List themeList){
		Set retList = new HashSet();
		for(Object theme : themeList){
			retList.add(((Theme)theme).getId());
		}
		return retList;
}
